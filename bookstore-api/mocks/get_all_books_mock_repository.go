// Code generated by MockGen. DO NOT EDIT.
// Source: repository/get_all_books_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "bookstore-api/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookStoreRepository is a mock of BookStoreRepository interface.
type MockBookStoreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookStoreRepositoryMockRecorder
}

// MockBookStoreRepositoryMockRecorder is the mock recorder for MockBookStoreRepository.
type MockBookStoreRepositoryMockRecorder struct {
	mock *MockBookStoreRepository
}

// NewMockBookStoreRepository creates a new mock instance.
func NewMockBookStoreRepository(ctrl *gomock.Controller) *MockBookStoreRepository {
	mock := &MockBookStoreRepository{ctrl: ctrl}
	mock.recorder = &MockBookStoreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookStoreRepository) EXPECT() *MockBookStoreRepositoryMockRecorder {
	return m.recorder
}

// GetAllBooks mocks base method.
func (m *MockBookStoreRepository) GetAllBooks(ctx context.Context) (error, []model.Books) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooks", ctx)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]model.Books)
	return ret0, ret1
}

// GetAllBooks indicates an expected call of GetAllBooks.
func (mr *MockBookStoreRepositoryMockRecorder) GetAllBooks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooks", reflect.TypeOf((*MockBookStoreRepository)(nil).GetAllBooks), ctx)
}
