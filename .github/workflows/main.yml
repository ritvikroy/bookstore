# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: BookStore

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  frontend-build:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3

        - name: Use node 16.14.0
          uses: actions/setup-node@v4
          with:
            node-version: "16.14.0"
            cache: "npm"
        - name: npm install & build
          working-directory: ./frontend
          run: |
            npm ci
            npm run build
        - name: run test
          working-directory: ./frontend
          run: |
            npm run coverage >> $GITHUB_STEP_SUMMARY

  build:
    needs: frontend-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"

      - name: Build
        run: CGO_ENABLED=0 GOARCH=arm64 GOOS=darwin go build -C bookstore-api

      - name: Test
        run: |
          go test -C bookstore-api
          COVERAGE= go test -C bookstore-api ./... --cover
          echo "Code coverage: $COVERAGE%"
#          if (( $(echo "$COVERAGE <= 0" | bc -l) )); then
#            echo "Code coverage is below threshold"
#            exit 1
#          fi

      - name: 'Give all permission'
        run: chmod 777 bookstore-api/bookstore-api
        
      - name: 'Make tar file'
        run: tar -cvf bookstore-api.tar bookstore-api/bookstore-api frontend/build

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: bookstore-api
          path: bookstore-api.tar  
